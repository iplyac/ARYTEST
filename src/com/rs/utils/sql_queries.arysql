#plan queries
planInfo=SELECT ID, CTIME, MODE FROM SYSTOOLS.ARY_PLAN_%s FOR READ ONLY
getScenarios=SELECT ID, DEFAULT, DESCRIPTION FROM SYSTOOLS.ARY_PLAN_SCENARIOUS_%s WHERE (PLAN_ID = ?) FOR READ ONLY
getPlanTasks=SELECT ID, NAME, COST, VISIBLE, PARTITION_ID FROM SYSTOOLS.ARY_PLAN_TASKS_%s WHERE (SCEN_ID = ?) FOR READ ONLY
queryTaskParam=SELECT KEY, VALUE, MUTABLE, VISIBLE, TARGET, SPEC FROM SYSTOOLS.ARY_TASK_PARAM_%s WHERE (TASK_ID = ?) FOR READ ONLY
updateTaskParam=UPDATE SYSTOOLS.ARY_TASK_PARAM_%s SET VALUE = ? WHERE (TASK_ID = ? AND KEY = ? AND TARGET = ? AND MUTABLE <> 'N')

# gets list of tables and foreign keys
depTables=SELECT ID, TYPE, NAME, SCHEMA, USER_DEFINED, MODULE_NAME, SPECIFIC, ENABLED, MUTABLE FROM SYSTOOLS.ARY_INITIAL_OBJ_%1$s WHERE TYPE = 6 %2$s FOR READ ONLY
# gets pairs of related tables
depTableLinks=SELECT A.ID, B.ID, A.CHILD_ID, A.SPECIFIC FROM SYSTOOLS.ARY_DEPENDENCIES_%1$s A, SYSTOOLS.ARY_DEPENDENCIES_%1$s B, SYSTOOLS.ARY_INITIAL_OBJ_%1$s C WHERE A.CHILD_ID = B.CHILD_ID AND A.SPECIFIC IN (4, 5) AND A.ID <> B.ID AND C.ID = A.CHILD_ID %2$s FOR READ ONLY
# gets all direct related objects for a selected object
allDepObjs=SELECT O.MODULE_NAME, O.SPECIFIC, O.SCHEMA, O.NAME, O.ID, O.TYPE, O.ENABLED, O.MUTABLE, O.USER_DEFINED FROM SYSTOOLS.ARY_INITIAL_OBJ_%1$s O WHERE O.ID IN (SELECT D.CHILD_ID FROM SYSTOOLS.ARY_DEPENDENCIES_%1$s D WHERE (D.ID = ?)) %2$s UNION (SELECT O.MODULE_NAME, O.SPECIFIC, O.SCHEMA, O.NAME, O.ID, O.TYPE, O.ENABLED, O.MUTABLE, O.USER_DEFINED FROM SYSTOOLS.ARY_INITIAL_OBJ_%1$s O WHERE O.ID IN (SELECT D.ID FROM SYSTOOLS.ARY_DEPENDENCIES_%1$s D WHERE (D.CHILD_ID = ?)) %2$s) FOR READ ONLY

#gets all foreign keys
getForeignKeys=SELECT OBJ_MASTER.ID AS MASTER_ID, \
        OBJ_SLAVE.ID AS SLAVE_ID, \
        FK.NAME \
FROM \
SYSTOOLS.ARY_INITIAL_OBJ_%1$s OBJ_MASTER, \
SYSTOOLS.ARY_INITIAL_OBJ_%1$s OBJ_SLAVE, \
SYSTOOLS.ARY_INITIAL_OBJ_%1$s FK, \
SYSTOOLS.ARY_DEPENDENCIES_%1$s DEP_FOR_MASTER, \
SYSTOOLS.ARY_DEPENDENCIES_%1$s DEP_FOR_SLAVE \
WHERE \
    OBJ_MASTER.TYPE = 6 AND OBJ_SLAVE.TYPE = 6 AND FK.TYPE = 23 AND \
    OBJ_MASTER.ID = DEP_FOR_MASTER.ID AND DEP_FOR_MASTER.SPECIFIC = 4 AND \
    OBJ_SLAVE.ID = DEP_FOR_SLAVE.ID AND DEP_FOR_SLAVE.SPECIFIC = 5 AND \
    DEP_FOR_SLAVE.CHILD_ID = FK.ID AND DEP_FOR_MASTER.CHILD_ID = FK.ID \
FOR READ ONLY

getRelatedTables=SELECT DISTINCT I.ID FROM SYSTOOLS.ARY_DEPENDENCIES_%1$s B, SYSTOOLS.ARY_INITIAL_OBJ_%1$s I WHERE B.CHILD_ID IN (SELECT D.CHILD_ID FROM SYSTOOLS.ARY_DEPENDENCIES_%1$s D INNER JOIN SYSTOOLS.ARY_INITIAL_OBJ_%1$s I ON D.CHILD_ID = I.ID WHERE (D.ID = ? AND I.TYPE = 23))  AND B.ID <> ? AND I.USER_DEFINED = 'N' AND I.ID = B.ID %2$s FOR READ ONLY

getStat=SELECT COUNT(OP.ACTION), OP.ACTION, %4$s \
FROM SYSTOOLS.ARY_OPERATIONS_%1$s AS OP, \
     SYSTOOLS.ARY_TABLES_%1$s AS TB, \
     SYSTOOLS.ARY_TRANSACTIONS_%1$s AS TR \
WHERE OP.TABLE_ID = TB.ID AND \
      OP.PARTITION = TB.PARTITION AND \
      OP.TR_ID = TR.ID AND \
      OP.PARTITION = TR.PARTITION \
      %2$s %3$s \
GROUP BY %4$s, ACTION FOR READ ONLY
getTotalStat=SELECT COUNT(OP.ACTION), OP.ACTION, '' \
FROM SYSTOOLS.ARY_OPERATIONS_%1$s AS OP, \
     SYSTOOLS.ARY_TABLES_%1$s AS TB, \
     SYSTOOLS.ARY_TRANSACTIONS_%1$s AS TR \
WHERE OP.TABLE_ID = TB.ID AND \
      OP.PARTITION = TB.PARTITION AND \
      OP.TR_ID = TR.ID AND \
      OP.PARTITION = TR.PARTITION \
      %2$s %3$s \
GROUP BY ACTION FOR READ ONLY
# get nodegroup post-filter statistics
getNgStat_9_1=SELECT SUM(i_o), SUM(u_o), SUM(d_o), NM FROM (SELECT TB.NGNAME AS NM, CASE WHEN OP.ACTION = 'I' THEN 1 ELSE 0 END AS i_o, CASE WHEN OP.ACTION = 'U' OR ACTION = 'X' THEN 1 ELSE 0 END AS u_o, CASE WHEN OP.ACTION = 'D' OR ACTION = 'R' THEN 1 ELSE 0 END AS d_o FROM SYSTOOLS.ARY_OPERATIONS_%1$s AS OP, SYSTOOLS.ARY_TABLES_%1$s AS TB, SYSTOOLS.ARY_TRANSACTIONS_%1$s AS TR WHERE (OP.TABLE_ID = TB.ID AND OP.PARTITION = TB.PARTITION AND OP.TR_ID = TR.ID AND OP.PARTITION = TR.PARTITION) %2$s %3$s) A GROUP BY NM FOR READ ONLY
# get table space post-filter statistics
getTbsStat_9_1=SELECT SUM(i_o), SUM(u_o), SUM(d_o), NM FROM (SELECT TB.TBSNAME AS NM, CASE WHEN OP.ACTION = 'I' THEN 1 ELSE 0 END AS i_o, CASE WHEN OP.ACTION = 'U' OR ACTION = 'X' THEN 1 ELSE 0 END AS u_o, CASE WHEN OP.ACTION = 'D' OR ACTION = 'R' THEN 1 ELSE 0 END AS d_o FROM SYSTOOLS.ARY_OPERATIONS_%1$s AS OP, SYSTOOLS.ARY_TABLES_%1$s AS TB, SYSTOOLS.ARY_TRANSACTIONS_%1$s AS TR WHERE (OP.TABLE_ID = TB.ID AND OP.PARTITION = TB.PARTITION AND OP.TR_ID = TR.ID AND OP.PARTITION = TR.PARTITION) %2$s %3$s) A GROUP BY NM FOR READ ONLY
# get app name post-filter statistics
getAppNameStat_9_1=SELECT SUM(i_o), SUM(u_o), SUM(d_o), NM FROM (SELECT TR.APPNAME AS NM, CASE WHEN OP.ACTION = 'I' THEN 1 ELSE 0 END AS i_o, CASE WHEN OP.ACTION = 'U' OR ACTION = 'X' THEN 1 ELSE 0 END AS u_o, CASE WHEN OP.ACTION = 'D' OR ACTION = 'R' THEN 1 ELSE 0 END AS d_o FROM SYSTOOLS.ARY_OPERATIONS_%1$s AS OP, SYSTOOLS.ARY_TABLES_%1$s AS TB, SYSTOOLS.ARY_TRANSACTIONS_%1$s AS TR WHERE (OP.TABLE_ID = TB.ID AND OP.PARTITION = TB.PARTITION AND OP.TR_ID = TR.ID AND OP.PARTITION = TR.PARTITION) %2$s %3$s) A GROUP BY NM FOR READ ONLY
# get app ID post-filter statistics
getAppIDStat_9_1=SELECT SUM(i_o), SUM(u_o), SUM(d_o), NM FROM (SELECT TR.APPID AS NM, CASE WHEN OP.ACTION = 'I' THEN 1 ELSE 0 END AS i_o, CASE WHEN OP.ACTION = 'U' OR ACTION = 'X' THEN 1 ELSE 0 END AS u_o, CASE WHEN OP.ACTION = 'D' OR ACTION = 'R' THEN 1 ELSE 0 END AS d_o FROM SYSTOOLS.ARY_OPERATIONS_%1$s AS OP, SYSTOOLS.ARY_TABLES_%1$s AS TB, SYSTOOLS.ARY_TRANSACTIONS_%1$s AS TR WHERE (OP.TABLE_ID = TB.ID AND OP.PARTITION = TB.PARTITION AND OP.TR_ID = TR.ID AND OP.PARTITION = TR.PARTITION) %2$s %3$s) A GROUP BY NM FOR READ ONLY
# select ARY datastore database version
getAryDsVersion=SELECT VR_VERSION, ARY_RELEASE FROM SYSTOOLS.ARY_INFO FOR READ ONLY
# query to DB2 to get instance name of current database
dbinstanceQuery=SELECT INST_NAME, CURRENT DBPARTITIONNUM AS CURR_NODE FROM SYSIBMADM.ENV_INST_INFO FOR READ ONLY
# query to DB2 to check if instance has pureScale
hasPureScaleQuery=SELECT 1 FROM TABLE(DB_MEMBERS()) A WHERE A.MEMBER_TYPE='C'
# query to DB2 to get the partitioning type
partitionTypeQuery=SELECT COUNT(*), HOST_NAME FROM TABLE(DB_PARTITIONS()) GROUP BY HOST_NAME
# query is used for receiving birthday for database and instance timezone
ctimeQuery=SELECT CTIME, CURRENT_TIMEZONE FROM SYSIBM.SYSTABLES WHERE (TRIM(CREATOR) = 'SYSIBM' AND TRIM(NAME) = 'SYSTABLES') FETCH FIRST ROW ONLY FOR READ ONLY WITH UR
# get database codeset
dbCodeset=SELECT TRIM(VALUE) FROM SYSIBMADM.DBCFG WHERE UPPER(NAME) = 'CODESET'

# check whether DB is recoverable
isDBRecoverable=SELECT 1 FROM (SELECT  SUM(CASE WHEN VALUE='OFF' THEN 0 ELSE 1 END) AS VAL FROM SYSIBMADM.DBCFG WHERE NAME IN ('logarchmeth2','logarchmeth1','logretain','userexit') GROUP BY DBPARTITIONNUM) WHERE VAL=0
isDateCompat=SELECT CASE WHEN VALUE = 'ON' THEN 1 ELSE 0 END FROM SYSIBMADM.DBCFG WHERE NAME = 'date_compat'

# This query is used for obtaining instance os name.
getInstanceOSInfo=SELECT TRIM(A.OS_NAME), TRIM(B.VALUE) FROM SYSIBMADM.ENV_SYS_INFO A, SYSIBMADM.ENV_SYS_RESOURCES B WHERE B.NAME='MACHINE_IDENTIFICATION'

# this SQL statement is used for obtaining value of <code>EXP_TIME</code> column from table <code>SYSTOOLS.ARY_SESSION</code> by <b>sessionID</b> and <b>session create time</b>
getCheckPoint=SELECT SYSTOOLS.ARY_TS_DIFF(CHECKPOINT, CURRENT_TIMESTAMP - HOUR(CURRENT_TIMEZONE) HOURS - MINUTE(CURRENT_TIMEZONE) MINUTES - SECOND(CURRENT_TIMEZONE) SECONDS) AS EXP_TIME, SAVED FROM SYSTOOLS.ARY_SESSION WHERE (ID = ?) FOR READ ONLY

# get databse name by session ID
getDBNamebySID=SELECT D.NAME FROM SYSTOOLS.ARY_DATABASE D, SYSTOOLS.ARY_SESSION S WHERE (S.DATABASE_ID = D.ID AND S.ID = ?)

# get current timestamp in UTC
currentTs=VALUES (CURRENT_TIMESTAMP - HOUR(CURRENT_TIMEZONE) HOURS - MINUTE(CURRENT_TIMEZONE) MINUTES - SECOND(CURRENT_TIMEZONE) SECONDS)

# this SQL statement updates <code>CHECKPOINT</code> column in table <code>SYSTOOLS.ARY_SESSION</code> for setting <b>sessionID</b> and <b>session create time</b>
updateCheckpoint=UPDATE SYSTOOLS.ARY_SESSION SET CHECKPOINT = (CURRENT_TIMESTAMP - HOUR(CURRENT_TIMEZONE) HOURS - MINUTE(CURRENT_TIMEZONE) MINUTES - SECOND(CURRENT_TIMEZONE) SECONDS + SYSTOOLS.ARY_GET_PROPERTY_INT(-1, 'SESSION_TIMEFRAME') MINUTES) WHERE (ID = ? AND CTIME <= ?)

# SQL query for filling table <code>SYSTOOLS.ARY_OPTS</code>
fillOptsQuery=INSERT INTO SYSTOOLS.ARY_OPT (SESSION_ID, PARTITION_ID, ORDER_INDX, KEY, VALUE) VALUES (?, ?, CURRENT_TIMESTAMP - HOUR(CURRENT_TIMEZONE) HOURS - MINUTE(CURRENT_TIMEZONE) MINUTES - SECOND(CURRENT_TIMEZONE) SECONDS, ?, ?)

# gets list of recovery plan objects
depObjects=SELECT ID, TYPE, NAME, SCHEMA, USER_DEFINED, MODULE_NAME, SPECIFIC, ENABLED, MUTABLE FROM SYSTOOLS.ARY_INITIAL_OBJ_%s
# gets pairs of related tables
depObjectLinks=SELECT A.ID, B.ID, A.CHILD_ID, A.SPECIFIC FROM SYSTOOLS.ARY_DEPENDENCIES_%1$s A LEFT OUTER JOIN SYSTOOLS.ARY_DEPENDENCIES_%1$s B ON A.CHILD_ID = B.CHILD_ID WHERE A.ID <> B.ID
# get related table roots query
getRelatedTableRoots=SELECT ID, SCHEMA, NAME, ENABLED FROM SYSTOOLS.ARY_INITIAL_OBJ_%1$s WHERE ID IN (SELECT I.ID FROM SYSTOOLS.ARY_DEPENDENCIES_%1$s D, SYSTOOLS.ARY_INITIAL_OBJ_%1$s I WHERE D.ID = I.ID AND D.SPECIFIC IN (4,5) AND I.USER_DEFINED = 'Y') FOR READ ONLY
# disable dependencies
disableDeps=UPDATE SYSTOOLS.ARY_INITIAL_OBJ_%1$s SET ENABLED = ? WHERE ID = ?

############################################### WTI DS SQL ##############################################
# add record about new build installation
addInstallStmt=INSERT INTO ARY.INSTALL (INSTALL_ID, INSTANCE, OSTYPE, VERSION, MOD_TS, VALID, SHARED, INSTDM) VALUES (?, ?, ?, ?, DEFAULT, 'N', ?, ?)

# add record about new build installation on the hostname
addInstallHostStmt=INSERT INTO ARY.INSTALL_HOST (INSTALL_ID, HOSTNAME, INSTALL_PATH, USERNAME, STATUS, TASK_ID) VALUES (?, ?, ?, ?, ?, ?)

# set status of build installation to the hostname
updateInstallHostStatusStmt=UPDATE ARY.INSTALL_HOST SET STATUS = ? WHERE INSTALL_ID = ? AND HOSTNAME = ?

# update info of build installation to the hostname
updateInstallHostStmt=UPDATE ARY.INSTALL_HOST SET HOSTNAME = ?, INSTALL_PATH = ?, USERNAME = ?, STATUS = ?, TASK_ID = ? WHERE INSTALL_ID = ?

# set common status of build installation
updateInstallStatusStmt=UPDATE ARY.INSTALL SET VALID = ? WHERE INSTALL_ID = ?

# add record to table <code>ARY.TASK_MSG_LOG</code>
insertTaskMsgStmt=INSERT INTO ARY.TASK_MSG_LOG (ID, INSTALL_ID, TASK_ID, MSG_TS, MSG_KEY, MSG_TYPE, PARAM1, PARAM2, PARAM3, PARAM4) VALUES (DEFAULT, ?, ?, CURRENT_TIMESTAMP, ?, ?, ?, ?, ?, ?)

# get list of build installations
getInstallsStmt=SELECT INSTALL_ID, INSTANCE, OSTYPE, VERSION, MOD_TS, VALID, SHARED, INSTDM FROM ARY.INSTALL FOR READ ONLY

# get list installations to hostname
getInstallHostsStmt=SELECT HOSTNAME, INSTALL_PATH, USERNAME, STATUS, TASK_ID FROM ARY.INSTALL_HOST WHERE INSTALL_ID = ? FOR READ ONLY

# get list of DS connections
getDsList=SELECT DSNAME, URL, INSTANCE, AUTH_REQ, USER_ID, PASSWORD, SAMEPASS, JDBC_PROPS FROM ARY.DATASTORE WHERE DSNAME LIKE ? FOR READ ONLY

# remove build installation record by "install_id"
removeInstallation=DELETE FROM ARY.INSTALL WHERE INSTALL_ID = ?

# select list of datastores from obsolete table with datastores "ARY.DATASTORES" for upgrading
selectOldDs=SELECT DSNAME, URL, INSTANCE, AUTH_REQ, USER_ID, PASSWORD, SAMEPASS, JDBC_PROPS FROM ARY.DATASTORES FOR READ ONLY

# select list of installation from obsolete table "ARY.INSTALLBUILDS" for upgrading
selectOldIns=SELECT MASTER_HOST, INSTALL_PATH, INSTALL_VERSION, OSTYPE, INSTANCE, INSTDM, INSTALL_DATE, SHARED_DIRECTORY, HOSTNAME FROM ARY.INSTALLBUILDS ORDER BY MASTER_HOST, INSTALL_PATH FOR READ ONLY

# insert new "install" record on upgrading
migrateInstall=INSERT INTO ARY.INSTALL (INSTALL_ID, INSTANCE, OSTYPE, VERSION, MOD_TS, VALID, SHARED, INSTDM) VALUES (?, ?, ?, ?, ?, 'M', ?, ?)

# insert new "installHost" record on upgrading
migrateInstallHost=INSERT INTO ARY.INSTALL_HOST (INSTALL_ID, HOSTNAME, INSTALL_PATH, USERNAME, STATUS, TASK_ID) VALUES (?, ?, ?, 'Unknown', 'M', ?)

# drop obsolete table with datastores
dropOldDs=DROP TABLE ARY.DATASTORES

# insert new "datastore" record on upgrading
migrateDs=INSERT INTO ARY.DATASTORE (ID, DSNAME, URL, INSTANCE, AUTH_REQ, USER_ID, PASSWORD, SAMEPASS, JDBC_PROPS, STATUS, CREATE_TS) VALUES (DEFAULT, ?, ?, ?, ?, ?, ?, ?, ?, 'M', DEFAULT)

# drop obsolete table with installations
dropOldInstall=DROP TABLE ARY.INSTALLBUILDS

# add new datastore record
addDatastore=INSERT INTO ARY.DATASTORE (ID, DSNAME, URL, INSTANCE, AUTH_REQ, USER_ID, PASSWORD, SAMEPASS, JDBC_PROPS, INSTALL_ID, TASK_ID, STATUS, CREATE_TS) VALUES (DEFAULT, ?, ?, ?, ?, ?, ?, ?, ?, NULL, NULL, 'D', DEFAULT)

# remove datastore record
removeDatastore=DELETE FROM ARY.DATASTORE WHERE (DSNAME = ?)

# change datastore record
updateDatastore=UPDATE ARY.DATASTORE SET URL = ?, INSTANCE = ?, AUTH_REQ = ?, USER_ID = ?, PASSWORD = ?, SAMEPASS = ?, JDBC_PROPS = ? WHERE (DSNAME = ?)

# Get count of installation with same INSTALL_HOST and HOSTNAME
getSharedInstallCount=SELECT COUNT(DISTINCT B.INSTALL_ID) FROM ARY.INSTALL_HOST A, ARY.INSTALL_HOST B WHERE A.INSTALL_ID=? AND A.INSTALL_PATH=B.INSTALL_PATH AND A.HOSTNAME=B.HOSTNAME

#Upgrade table ARY.TASK_MSG_LOG 
migrateTaskMsgLog=ALTER TABLE ARY.TASK_MSG_LOG DROP CONSTRAINT INSTALL_ID_MSG_FK
#########################################################################################################

############################################### LA Result SQL ##############################################
getTransList= \
SELECT INX, CASE WHEN A.GG = 'Y' THEN A.UR ELSE '' END, A.TS, \
        A.STATE, A.APPNAME, A.AUTHID, A.APPID, A.LSN, A.LRI1, \
        CASE WHEN A.GG = 'N' THEN A.GXID ELSE '' END, A.XID, \
        A.APPSEQ, A.APPCP, A.APPDB, A.START_LSN, A.START_LRI1, \
        A.ORDER_ID, A.APPTIME \
FROM (SELECT ROW_NUMBER() OVER (ORDER BY TR.ORDER_ID) AS INX, \
              MAX(TR.URID) AS UR, \
              MAX(TR.APPTIME) AS APPTIME, \
              MAX(TR.TS) AS TS, \
              MAX(TR.STATE) AS STATE, \
              MAX(TR.APPNAME) AS APPNAME, \
              MAX(TR.AUTHID) AS AUTHID, \
              MAX(TR.APPID) AS APPID, \
              MAX(TR.LSN) AS LSN, \
              MAX(TR.LRI1) AS LRI1, \
              MAX(TR.GXID) AS GXID, \
              MAX(TR.GXID_GENERATED) AS GG, \
              MAX(TR.XID) AS XID, \
              MAX(TR.APPSEQ) AS APPSEQ, \
              MAX(TR.APPCP) AS APPCP, \
              MAX(TR.APPDB) AS APPDB, \
              MAX(TR.START_LSN) AS START_LSN, \
              MAX(TR.START_LRI1) AS START_LRI1, \
              TR.ORDER_ID AS ORDER_ID \
FROM (SELECT DISTINCT OP.PARTITION, OP.TR_ID, OP.ACTION \
      FROM SYSTOOLS.ARY_OPERATIONS_%1$s OP, SYSTOOLS.ARY_TABLES_%1$s TB %6$s \
      WHERE OP.ACTION NOT IN ('T', 'C', 'G') \
      AND OP.TABLE_ID = TB.ID AND OP.PARTITION = TB.PARTITION %3$s %7$s) OP, \
      SYSTOOLS.ARY_TRANSACTIONS_%1$s TR \
 WHERE OP.PARTITION = TR.PARTITION AND OP.TR_ID = TR.ID %2$s %8$s\
      GROUP BY TR.ORDER_ID) A  WHERE (INX >= %4$s AND INX <= %5$s) ORDER BY INX FOR READ ONLY

getTransCount=SELECT COUNT(DISTINCT TR.ORDER_ID) \
 FROM SYSTOOLS.ARY_OPERATIONS_%1$s OP, \
     SYSTOOLS.ARY_TRANSACTIONS_%1$s TR, \
     SYSTOOLS.ARY_TABLES_%1$s TB %4$s \
 WHERE (OP.ACTION NOT IN ('T', 'C', 'G') AND OP.TABLE_ID = TB.ID AND \
       OP.TR_ID = TR.ID AND OP.PARTITION = TR.PARTITION AND \
       OP.PARTITION = TB.PARTITION ) %2$s %3$s %5$s FOR READ ONLY
        
getTableColumnsList=SELECT DT.COLUMN_NAME FROM SYSTOOLS.ARY_OPERATIONS_%1$s OP, SYSTOOLS.ARY_DETAILS_%1$s DT, SYSTOOLS.ARY_TABLES_%1$s TB WHERE (OP.TABLE_ID = TB.ID AND OP.TR_ID = DT.TR_ID) %2$s GROUP BY DT.COLUMN_NAME FOR READ ONLY

############################################### Quiet Time ##############################################
getQTList=WITH FI (TS, APPTIME) AS ( \
             VALUES (CAST(? AS TIMESTAMP),CAST(? AS TIMESTAMP)) \
             UNION ALL \
             SELECT MAX( TR.TS) AS TS, MAX( TR.APPTIME) AS APPTIME \
                FROM SYSTOOLS.ARY_OPERATIONS_%1$s OP, SYSTOOLS.ARY_TRANSACTIONS_%1$s TR, \
                     SYSTOOLS.ARY_TABLES_%1$s TB \
                WHERE (OP.ACTION <> 'T' AND OP.ACTION <> 'C' AND OP.ACTION <> 'G' AND \
                       OP.TABLE_ID = TB.ID AND OP.TR_ID = TR.ID AND \
                       OP.PARTITION = TR.PARTITION AND OP.PARTITION = TB.PARTITION AND \
                       TR.APPTIME IS NOT NULL) %2$s %3$s \
                GROUP BY TR.ORDER_ID \
             UNION ALL \
             VALUES (CAST(? AS TIMESTAMP),CAST(? AS TIMESTAMP))) \
             SELECT INX, QT_START, QT_END, QT, CNT \
                FROM (SELECT ROW_NUMBER() OVER(ORDER BY QT_START) AS INX, QT_START, QT_END, QT, COUNT(QT) OVER() AS CNT \
                        FROM (SELECT MAX(TR1.TS) AS QT_START, \
                                     TR2.APPTIME AS QT_END, \
                                     TIMESTAMPDIFF( 2, CHAR( TR2.APPTIME - MAX(TR1.TS))) AS QT \
                                 FROM FI AS TR1 INNER JOIN \
                                      FI AS TR2 ON TR1.APPTIME < TR2.APPTIME \
                                 GROUP BY TR2.APPTIME \
                                 HAVING MAX( TR1.TS) < TR2.APPTIME) \
                        WHERE QT >= ? ) \
             WHERE INX >= ? AND INX <= ? \
             ORDER BY INX \
             FOR READ ONLY

getQTListDateCompat=WITH FI (TS, APPTIME) AS ( \
             VALUES (CAST(? AS TIMESTAMP),CAST(? AS TIMESTAMP)) \
             UNION ALL \
             SELECT MAX( TR.TS) AS TS, MAX( TR.APPTIME) AS APPTIME \
                FROM SYSTOOLS.ARY_OPERATIONS_%1$s OP, SYSTOOLS.ARY_TRANSACTIONS_%1$s TR, \
                     SYSTOOLS.ARY_TABLES_%1$s TB \
                WHERE (OP.ACTION <> 'T' AND OP.ACTION <> 'C' AND OP.ACTION <> 'G' AND \
                       OP.TABLE_ID = TB.ID AND OP.TR_ID = TR.ID AND \
                       OP.PARTITION = TR.PARTITION AND OP.PARTITION = TB.PARTITION AND \
                       TR.APPTIME IS NOT NULL) %2$s %3$s \
                GROUP BY TR.ORDER_ID \
             UNION ALL \
             VALUES (CAST(? AS TIMESTAMP),CAST(? AS TIMESTAMP))) \
             SELECT INX, QT_START, QT_END, QT, CNT \
                FROM (SELECT ROW_NUMBER() OVER(ORDER BY QT_START) AS INX, QT_START, QT_END, QT, COUNT(QT) OVER() AS CNT \
                        FROM (SELECT MAX(TR1.TS) AS QT_START, \
                                     TR2.APPTIME AS QT_END, \
                                     INTEGER( (TR2.APPTIME - MAX(TR1.TS)) * 86400) AS QT \
                                FROM FI AS TR1 INNER JOIN \
                                     FI AS TR2 ON TR1.APPTIME < TR2.APPTIME \
                                GROUP BY TR2.APPTIME \
                                HAVING MAX( TR1.TS) < TR2.APPTIME) \
                        WHERE QT >= ? ) \
             WHERE INX >= ? AND INX <= ? \
             ORDER BY INX \
             FOR READ ONLY

############################################### Text and XML reports ##############################################
#Get operation information for report.
getOperListRep=SELECT OPID, PARTITION, ACTION, LSN, LRI1, NAME, SCHEMA, TBSNAME, NGNAME, TRID \
                 FROM (SELECT OP.ID AS OPID, \
                              OP.PARTITION AS PARTITION, \
                              OP.ACTION AS ACTION, \
                              OP.LSN AS LSN, \
                              OP.LRI1 AS LRI1, \
                              TB.NAME AS NAME, \
                              TB.SCHEMA AS SCHEMA, \
                              TB.TBSNAME AS TBSNAME, \
                              TB.NGNAME AS NGNAME, \
                              OP.TR_ID AS TRID \
                       FROM SYSTOOLS.ARY_OPERATIONS_%1$s OP, \
                            SYSTOOLS.ARY_TRANSACTIONS_%1$s TR, \
                            SYSTOOLS.ARY_TABLES_%1$s TB \
                            %4$s \
                       WHERE (OP.ACTION <> 'T' AND OP.ACTION <> 'C' AND \
                              OP.TABLE_ID = TB.ID AND OP.TR_ID = TR.ID AND \
                              OP.PARTITION = TR.PARTITION AND \
                              OP.PARTITION = TB.PARTITION) \
                              %2$s %3$s %5$s) A \
                ORDER BY TRID, OPID FOR READ ONLY

#Get transaction information for report.
getTransListRep=SELECT CASE WHEN A.GG = 'Y' THEN A.UR ELSE '' END, A.TS, \
                       A.STATE, A.AUTHID, A.LSN, A.LRI1 , \
                       CASE WHEN A.GG = 'N' THEN A.GXID ELSE '' END, \
                       A.XID, A.APPSEQ, A.APPCP, A.APPDB, A.START_LSN, \
                       A.START_LRI1, A.ID \
                FROM (SELECT ROW_NUMBER() OVER (ORDER BY TR.ORDER_ID) AS INX,\
                             MAX(TR.URID) AS UR, MAX(TR.TS) AS TS, MAX(TR.STATE) AS STATE,\
                             MAX(TR.AUTHID) AS AUTHID, MAX(TR.LSN) AS LSN,\
                             MAX(TR.LRI1) AS LRI1, MAX(TR.GXID) AS GXID, MAX(GXID_GENERATED) AS GG,\
                             MAX(TR.XID) AS XID, MAX(TR.APPSEQ) AS APPSEQ, MAX(TR.APPCP) AS APPCP,\
                             MAX(TR.APPDB) AS APPDB, MAX(TR.START_LSN) AS START_LSN,\
                             MAX(TR.START_LRI1) AS START_LRI1, MAX(TR.ID) AS ID \
                      FROM SYSTOOLS.ARY_OPERATIONS_%1$s OP,\
                           SYSTOOLS.ARY_TRANSACTIONS_%1$s TR,\
                           SYSTOOLS.ARY_TABLES_%1$s TB \
                           %4$s \
                      WHERE (OP.ACTION <> 'T' AND OP.ACTION <> 'C' AND OP.TABLE_ID = TB.ID AND \
                             OP.TR_ID = TR.ID AND OP.PARTITION = TR.PARTITION AND \
                             OP.PARTITION = TB.PARTITION \
                             %2$s %3$s %5$s) \
                      GROUP BY TR.ORDER_ID) A \
                  ORDER BY INX FOR READ ONLY

#Get details information for report.
getDetailsRep=SELECT TRIM(DT.COLUMN_NAME), DT.PREV, DT.POST, ASCII(SUBSTR(DT.FLAG, 1, 1)), ASCII(SUBSTR(DT.FLAG, 2)) \
              FROM SYSTOOLS.ARY_DETAILS_%1$s AS DT, SYSTOOLS.ARY_OPERATIONS_%1$s AS OP \
              WHERE (DT.OP_ID = OP.ID AND DT.PARTITION = OP.PARTITION AND DT.TR_ID = OP.TR_ID) AND \
              (DT.PARTITION = ? AND DT.OP_ID = ? AND DT.TR_ID = ?) FOR READ ONLY

#SQL query for obtaining data for CSV report.
getCSVRep=SELECT TR.URID, TR.LSN, TR.LRI1, TR.START_LSN, TR.START_LRI1, TR.TS, TR.STATE, TR.APPNAME, \
                 TR.APPID, TR.AUTHID, TR.PARTITION, OP.ACTION, OP.LSN, OP.LRI1, TB.NGNAME, TB.TBSNAME, \
                 TB.SCHEMA, TB.NAME, CASE WHEN TR.GXID_GENERATED = 'N' THEN TR.GXID ELSE '' END, TR.XID, \
                 TR.APPSEQ, TR.APPCP, TR.APPDB \
          FROM SYSTOOLS.ARY_OPERATIONS_%s OP, SYSTOOLS.ARY_TRANSACTIONS_%s TR, SYSTOOLS.ARY_TABLES_%s TB %s\
          WHERE (OP.TABLE_ID = TB.ID AND OP.TR_ID = TR.ID AND OP.PARTITION = TR.PARTITION  AND OP.PARTITION = TB.PARTITION \
          AND OP.ACTION != 'G' %s %s %s) FOR READ ONLY

isOptionSet = SELECT 1 FROM SYSTOOLS.ARY_OPTIONS WHERE SESSION_ID = ? AND OPTION = ? FOR READ ONLY
################################################## Tracers ##############################################
# query for SYSTOOLS.ARY_INFO
aryInfo=SELECT * FROM SYSTOOLS.ARY_INFO FOR READ ONLY
# query for SYSTOOLS.ARY_PROPERTY
aryProperty=SELECT * FROM SYSTOOLS.ARY_PROPERTY FOR READ ONLY
# query for SYSTOOLS.ARY_DATABASE
aryDatabase=SELECT * FROM SYSTOOLS.ARY_DATABASE WHERE (ID = ?)  FOR READ ONLY
# query for SYSTOOLS.ARY_NODE
aryNode=SELECT * FROM SYSTOOLS.ARY_NODE WHERE (DATABASE_ID  = ?) FOR READ ONLY
# query for SYSTOOLS.ARY_SESSION
arySession=SELECT * FROM SYSTOOLS.ARY_SESSION WHERE (ID = ?) FOR READ ONLY
# query for SYSTOOLS.ARY_TASK
aryTask=SELECT * FROM SYSTOOLS.ARY_TASK  WHERE (SESSION_ID = ?) FOR READ ONLY
# query for SYSTOOLS.ARY_OPTIONS
aryOptions=SELECT * FROM SYSTOOLS.ARY_OPTIONS WHERE (SESSION_ID = ?) FOR READ ONLY
# query for SYSTOOLS.ARY_SESSIONLOG
arySessionLog=SELECT * FROM SYSTOOLS.ARY_SESSIONLOG WHERE (SESSION_ID = ?) FOR READ ONLY
# query for SYSTOOLS.ARY_OPT
aryOpt=SELECT * FROM SYSTOOLS.ARY_OPT WHERE (SESSION_ID = ?) FOR READ ONLY
# query for SYSTOOLS.ARY_TABLE
aryTable=SELECT * FROM SYSTOOLS.ARY_TABLE FOR READ ONLY
# query for SYSTOOLS.ARY_SYS_TABLES_EXISTS
arySysTablesExist=SELECT * FROM SYSTOOLS.ARY_SYS_TABLES_EXISTS FOR READ ONLY
# get DID by SID
getDIDbySID=SELECT DATABASE_ID FROM SYSTOOLS.ARY_SESSION WHERE (ID = ?) FOR READ ONLY
# get DID by DBName
getDIDbyName=SELECT ID FROM SYSTOOLS.ARY_DATABASE WHERE (NAME = ?) FOR READ ONLY
# query for SYSTOOLS.ARY_METAINFORMERXXX
aryMetaInformer=SELECT * FROM SYSTOOLS.ARY_METAINFORMER%s FOR READ ONLY
# query for SYSTOOLS.ARY_POINTXXX
aryPoint=SELECT * FROM SYSTOOLS.ARY_POINT%s FOR READ ONLY
# query for SYSTOOLS.ARY_GEOMETRYXXX
aryGeometry=SELECT * FROM SYSTOOLS.ARY_GEOMETRY%s ORDER BY URID, OPERATION_ID FOR READ ONLY
# query for SYSTOOLS.ARY_MARKERXXX
aryMarker=SELECT * FROM SYSTOOLS.ARY_MARKER%s FOR READ ONLY
# query for SYSTOOLS.ARY_TRANSACTIONXXX
aryTransaction=SELECT * FROM SYSTOOLS.ARY_TRANSACTION%s FOR READ ONLY
# query for SYSTOOLS.ARY_PLAN_YYY
aryPlan=SELECT * FROM SYSTOOLS.ARY_PLAN_%s FOR READ ONLY
# query for SYSTOOLS.ARY_ARY_PLAN_SCENARIOUS_YYY
aryScenarious=SELECT * FROM SYSTOOLS.ARY_PLAN_SCENARIOUS_%s FOR READ ONLY
# query for SYSTOOLS.ARY_PLAN_TASKS_YYY
aryPlanTasks=SELECT * FROM SYSTOOLS.ARY_PLAN_TASKS_%s FOR READ ONLY
# query for SYSTOOLS.ARY_TASK_PARAM_YYY
aryPlanTasksParam=SELECT * FROM SYSTOOLS.ARY_TASK_PARAM_%s FOR READ ONLY
# query for SYSTOOLS.ARY_DEPENDENCIES_YYY
aryPlanDependencies=SELECT * FROM SYSTOOLS.ARY_DEPENDENCIES_%s FOR READ ONLY
# query for SYSTOOLS.ARY_INITIAL_OBJ_YYY
aryPlanInitialObj=SELECT * FROM SYSTOOLS.ARY_INITIAL_OBJ_%s FOR READ ONLY
# query for SYSTOOLS.ARY_APP_SUMMARY_YYY
aryAppSumm=SELECT * FROM SYSTOOLS.ARY_APP_SUMMARY_%s FOR READ ONLY
# query for SYSTOOLS.ARY_TABLES_YYY
aryLaTables=SELECT * FROM SYSTOOLS.ARY_TABLES_%s FOR READ ONLY
# query for SYSTOOLS.ARY_TRANSACTIONS_YYY
aryLaTrancs=SELECT * FROM SYSTOOLS.ARY_TRANSACTIONS_%s FOR READ ONLY
# query for SYSTOOLS.ARY_OPERATIONS_YYY
aryLaOpers=SELECT * FROM SYSTOOLS.ARY_OPERATIONS_%s FOR READ ONLY
# query for SYSTOOLS.ARY_SQL_LONG_YYY
aryLaSqlLong=SELECT * FROM SYSTOOLS.ARY_SQL_LONG_%s FOR READ ONLY
# query for SYSTOOLS.ARY_SQL_YYY
#aryLaAllSql=SELECT * FROM SYSTOOLS.ARY_SQL_%s where SQL like 'I%%' or SQL like 'U%%' or SQL like 'D%%' ORDER BY TR_ID, OP_ID FETCH FIRST %s ROWS ONLY FOR READ ONLY
aryLaAllSql=SELECT SQL FROM SYSTOOLS.ARY_SQL_%1$s S, SYSTOOLS.ARY_OPERATIONS_%1$s OP WHERE S.TR_ID=OP.TR_ID AND S.OP_ID = OP.ID AND OP.ACTION NOT IN ('T', 'C', 'G') AND OP.PARTITION = S.PARTITION	
# query for SYSTOOLS.ARY_DDL_YYY
aryLaDDL=SELECT * FROM SYSTOOLS.ARY_DDL_%s FOR READ ONLY
# query for SYSTOOLS.ARY_DETAILS_YYY
aryLaDetails=SELECT * FROM SYSTOOLS.ARY_DETAILS_%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSTABLESXXX
arySysTables=SELECT * FROM SYSTOOLS.ARYSYSTABLES%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSDATAPARTITIONSXXX
arySysDataPartitions=SELECT * FROM SYSTOOLS.ARYSYSDATAPARTITIONS%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSTABLESPACESXXX
arySysTableSpaces=SELECT * FROM SYSTOOLS.ARYSYSTABLESPACES%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSINDEXESXXX
arySysIndexes=SELECT * FROM SYSTOOLS.ARYSYSINDEXES%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSINDEXCOLUSEXXX
arySysIndexeColUse=SELECT * FROM SYSTOOLS.ARYSYSINDEXCOLUSE%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSCOLCHECKSXXX
arySysColChecks=SELECT * FROM SYSTOOLS.ARYSYSCOLCHECKS%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSTABCONSTXXX
arySysTabConst=SELECT * FROM SYSTOOLS.ARYSYSTABCONST%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSCOLUSEXXX
arySysColUse=SELECT * FROM SYSTOOLS.ARYSYSCOLUSE%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSCHECKSXXX
arySysChecks=SELECT * FROM SYSTOOLS.ARYSYSCHECKS%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSDATATYPESXXX
arySysDataTypes=SELECT * FROM SYSTOOLS.ARYSYSDATATYPES%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSSCHEMATAXXX
arySysSchemata=SELECT * FROM SYSTOOLS.ARYSYSSCHEMATA%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSRELSXXX
arySysRels=SELECT * FROM SYSTOOLS.ARYSYSRELS%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSDEPENDENCIESXXX
arySysDependencies=SELECT * FROM SYSTOOLS.ARYSYSDEPENDENCIES%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSVIEWDEPXXX
arySysViewDep=SELECT * FROM SYSTOOLS.ARYSYSVIEWDEP%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSPLANDEPXXX
arySysPlanDep=SELECT * FROM SYSTOOLS.ARYSYSPLANDEP%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSROUTINESXXX
arySysRoutines=SELECT * FROM SYSTOOLS.ARYSYSROUTINES%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSMODULESXXX
arySysModules=SELECT * FROM SYSTOOLS.ARYSYSMODULES%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSTRIGGERSXXX
arySysTriggers=SELECT * FROM SYSTOOLS.ARYSYSTRIGGERS%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSSEQUENCESXXX
arySysSequences=SELECT * FROM SYSTOOLS.ARYSYSSEQUENCES%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSVARIABLESXXX
arySysVariables=SELECT * FROM SYSTOOLS.ARYSYSVARIABLES%s FOR READ ONLY

#query for SYSTOOLS.ARYSYSBUFFERPOOLSXXX
arySysBufferPools=SELECT * FROM SYSTOOLS.ARYSYSBUFFERPOOLS%s FOR READ ONLY

#query for total statistics
#totalStatQuery=SELECT SUM(I_COUNT), SUM(U_COUNT), SUM(D_COUNT) FROM SYSTOOLS.ARY_TABLES_%s FOR READ ONLY
totalStatQuery= SELECT SUM(I_COUNT) FROM SYSTOOLS.ARY_TABLES_%1$s UNION SELECT SUM(U_COUNT) FROM SYSTOOLS.ARY_TABLES_%1$s UNION SELECT SUM(D_COUNT) FROM SYSTOOLS.ARY_TABLES_%1$s

#query is used for checking existence of transaction filters
checkTranFilters=\
SELECT %2$s \
FROM SYSTOOLS.ARY_TRANSACTIONS_%1$s T, SYSTOOLS.ARY_OPERATIONS_%1$s O \
WHERE (T.ID = O.TR_ID AND T.PARTITION = O.PARTITION AND \
       O.ACTION NOT IN ('G', 'C') AND \
       %2$s IS NOT NULL %3$s) \
ORDER BY %2$s FETCH FIRST 1 ROW ONLY FOR READ ONLY

#query for obtaining transaction time range
tsRangeQuery=SELECT MIN(TS), MAX(TS) FROM SYSTOOLS.ARY_TRANSACTIONS_%s FOR READ ONLY

#query is used for checking application filters
checkAppFilters=SELECT MAX(DECODE(APPNAME,'{empty}',0,1)) AS ISAPPNAME, MAX(DECODE(APPID,'{empty}',0,1)) AS ISAPPID, MAX(DECODE(AUTHID,'{empty}',0,1)) AS ISAUTHID FROM SYSTOOLS.ARY_APP_SUMMARY_%s FOR READ ONLY